{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","res","publicKey","toString","alert","error","connectWallet","response","onInputChange","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendGif","length","addGif","account","fetch","useEffect","addEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7983ddea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useState, useEffect } from \"react\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport {\n  Connection,\n  PublicKey,\n  clusterApiUrl,\n  STAKE_CONFIG_ID,\n} from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\n\n// Constants\nconst { SystemProgram, Keypair } = web3;\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst TWITTER_HANDLE = \"thryec\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  const TEST_GIFS = [\n    \"https://artblocks-mainnet.s3.amazonaws.com/78000086.png\",\n    \"https://artblocks-mainnet.s3.amazonaws.com/23000003.png\",\n    \"https://artblocks-mainnet.s3.amazonaws.com/53000011.png\",\n    \"https://artblocks-mainnet.s3.amazonaws.com/64000123.png\",\n  ];\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const res = await solana.connect({ onlyIfTrusted: true });\n          console.log(\"Connected with Public Key: \", res.publicKey.toString());\n          setWalletAddress(res.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Please download the Phantom wallet :)\");\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key: \", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    console.log(\"Gif link: \", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF sucesfully sent to program\", inputValue);\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifs: \", error);\n      setGifList(null);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"load\", async () => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">Art Blocks Gallery</p>\n          <p className=\"sub-text\">\n            View your Art Blocks collection in the metaverse ✨\n          </p>\n          <div className=\"test\">\n            {!walletAddress && renderNotConnectedContainer()}\n            {walletAddress && renderConnectedContainer()}\n          </div>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}